box: google/golang
build:
  # The steps that will be executed on build
  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace

    # Get the dependencies
    - script:
        name: go get
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          go get -u github.com/tools/godep
          export PATH=$WERCKER_SOURCE_DIR/bin:$PATH

    # Test the project
    - script:
        name: go test
        code: |
          godep go test ./... -v -race

    # Setting the coverage watermark low.
    # This should be raised as we gain more coverage...
    # Test coverage for the project
    - script:
        name: go test cover
        code: |
          ./testCoverage ./... $COVERAGE_WATERMARK

    # lets make sure we can build
    # the main executable (later we can cross compile and upload)
    - script:
        name: go smoke build
        code: |
          godep go build ./cmd/cfops/*.go 

    - script:
        name: add repo to artifact
        code: |
          cp -R ./ ${WERCKER_OUTPUT_DIR}

    - script:
        name: go get goxc util so we can cross compile
        code: |
          go get -u -v github.com/laher/goxc
          PATH=$GOPATH/bin:$PATH sudo goxc -t -os "linux darwin windows"

    - script:
        name: set release id variable and version for gox file
        code: |
          go get github.com/xchapter7x/versioning
          export NEXT_VERSION=`versioning bump_patch`
          (cd cmd/cfops/ && goxc -wc -pv=${NEXT_VERSION})

    - script:
        name: cross platform release
        code: |
          (cd cmd/cfops/ && goxc -env GOPATH=${WERCKER_SOURCE_DIR}/Godeps/_workspace:$GOPATH -d=${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/ -bc="darwin linux windows" ) 

    - script:
        name: create tarball
        code: |
          tar -cvzf cfops_binaries.tgz ${WERCKER_OUTPUT_DIR}/${BUILD_DIR}/

    - script:
        name: add repo to artifact
        code: |
          cp -R ./ ${WERCKER_OUTPUT_DIR}
          ls -la ${WERCKER_OUTPUT_DIR}

deploy:
  steps: 
    - script:
        name: install-packages
        code: |
          sudo apt-get install -y ssh wget
          ls -la ${WERCKER_OUTPUT_DIR}

    - wercker/add-ssh-key@1.0.2:
        keyname: PCF_GITHUB_KEY

    - add-to-known_hosts:
        hostname: github.com
        fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48

    - script:
        name: set release id variable for version 
        code: |
          go get github.com/xchapter7x/versioning
          export WERCKER_GITHUB_CREATE_RELEASE_ID=`versioning bump_patch`

    - xchapter7x/flowy-release:
        action: "get-latest"
        tag_variable_name: "VERSION_TAG"
        git_name: $GITFLOW_NAME
        git_email: $GITFLOW_EMAIL

    - xchapter7x/flowy-release:
        action: "complete-release"
        active: $GITFLOW_ACTIVE
        git_name: $GITFLOW_NAME
        git_email: $GITFLOW_EMAIL
    
    #this is a workaround for the flowy-release not resetting
    #its branch state... 
    - script:
        name: reset git to proper commit
        code: |
          git checkout -fq ${WERCKER_GIT_COMMIT}
          git submodule update --init --recursive

    - github-create-release:
        token: $GITHUB_TOKEN
        tag: $WERCKER_GITHUB_CREATE_RELEASE_ID
        title: CFOPS $WERCKER_GITHUB_CREATE_RELEASE_ID
        draft: $RELEASE_DRAFT
    
    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: ${WERCKER_OUTPUT_DIR}/cfops_binaries.tgz
        release_id: $WERCKER_GITHUB_CREATE_RELEASE_ID
        content-type: application/x-gzip
